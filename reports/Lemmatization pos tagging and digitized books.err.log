Traceback (most recent call last):
  File "C:\Users\lakj\AppData\Local\Programs\Python\Python312\Lib\site-packages\jupyter_cache\executors\utils.py", line 58, in single_nb_execution
    executenb(
  File "C:\Users\lakj\AppData\Local\Programs\Python\Python312\Lib\site-packages\nbclient\client.py", line 1314, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\lakj\AppData\Local\Programs\Python\Python312\Lib\site-packages\jupyter_core\utils\__init__.py", line 165, in wrapped
    return loop.run_until_complete(inner)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\lakj\AppData\Local\Programs\Python\Python312\Lib\asyncio\base_events.py", line 687, in run_until_complete
    return future.result()
           ^^^^^^^^^^^^^^^
  File "C:\Users\lakj\AppData\Local\Programs\Python\Python312\Lib\site-packages\nbclient\client.py", line 709, in async_execute
    await self.async_execute_cell(
  File "C:\Users\lakj\AppData\Local\Programs\Python\Python312\Lib\site-packages\nbclient\client.py", line 1062, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "C:\Users\lakj\AppData\Local\Programs\Python\Python312\Lib\site-packages\nbclient\client.py", line 918, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
# Importing the Natural Language Toolkit (nltk) library
import nltk
from nltk.stem import WordNetLemmatizer

# Downloading the 'averaged_perceptron_tagger' model, which is used for part-of-speech tagging
nltk.download('averaged_perceptron_tagger')

# Importing the WordNet corpus from nltk, which is used for lemmatization
from nltk.corpus import wordnet

# Initializing the WordNetLemmatizer, which is used to lemmatize words
lemmatizer = WordNetLemmatizer()

# Function to convert nltk POS tags to WordNet POS tags
def pos_tagger(nltk_tag):
    if nltk_tag.startswith('J'):
        return wordnet.ADJ  # Adjective
    elif nltk_tag.startswith('V'):
        return wordnet.VERB  # Verb
    elif nltk_tag.startswith('N'):
        return wordnet.NOUN  # Noun
    elif nltk_tag.startswith('R'):
        return wordnet.ADV  # Adverb
    else:
        return None  # If the tag doesn't match, return None

# Send in a list of words
in_data_list = tokens_wo_stopwords

# Performing part-of-speech tagging on the input data list
pos_tagged = nltk.pos_tag(in_data_list)

# Mapping the nltk POS tags to WordNet POS tags
wordnet_tagged = list(map(lambda x: (x[0], pos_tagger(x[1])), pos_tagged))

# Initializing an empty list to store lemmatized words
lemmatized_word_list = []

# Iterating over the word and its corresponding WordNet POS tag
for word, tag in wordnet_tagged:
    if tag is None:
        # If no valid WordNet POS tag, append the original word
        lemmatized_word_list.append(word)
    else:
        # Lemmatize the word using the WordNet POS tag
        lemmatized_word_list.append(lemmatizer.lemmatize(word, tag))

# List of lemmatized words
#lemmatized_word_list[0:10]
------------------


[1;31m---------------------------------------------------------------------------[0m
[1;31mModuleNotFoundError[0m                       Traceback (most recent call last)
Cell [1;32mIn[5], line 2[0m
[0;32m      1[0m [38;5;66;03m# Importing the Natural Language Toolkit (nltk) library[39;00m
[1;32m----> 2[0m [38;5;28;01mimport[39;00m [38;5;21;01mnltk[39;00m
[0;32m      3[0m [38;5;28;01mfrom[39;00m [38;5;21;01mnltk[39;00m[38;5;21;01m.[39;00m[38;5;21;01mstem[39;00m [38;5;28;01mimport[39;00m WordNetLemmatizer
[0;32m      5[0m [38;5;66;03m# Downloading the 'averaged_perceptron_tagger' model, which is used for part-of-speech tagging[39;00m

[1;31mModuleNotFoundError[0m: No module named 'nltk'

